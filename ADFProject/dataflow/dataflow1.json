{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Json2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          address as (street as string, city as string, zip as string)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'singleDocument') ~> source1",
				"source1 derive(address = concat(\r",
				"  '{\\\"street\\\":\\\"', address.street,\r",
				"  '\\\",\\\"city\\\":\\\"', address.city,\r",
				"  '\\\",\\\"zip\\\":\\\"', address.zip,\r",
				"  '\\\"}'\r",
				")\r",
				") ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PostedSince as string,",
				"          ParentLeaseGroupID as string,",
				"          Transactions as (ParentLeaseGroupID as string, TransactionID as string, Date as string, Type as string, TransactionCategory as string, Description as string, Amount as integer, ReferenceNumber as string)[],",
				"          MethodName as string,",
				"          Status as string,",
				"          AccountID as integer,",
				"          PropertyID as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}