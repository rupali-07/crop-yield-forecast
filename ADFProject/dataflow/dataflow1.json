{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "StgCustomer",
						"type": "DatasetReference"
					},
					"name": "stagingcustomer"
				},
				{
					"dataset": {
						"referenceName": "DimCustomer",
						"type": "DatasetReference"
					},
					"name": "Dimensioncustomer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimCustomer",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DimCustomer",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "exists1",
					"description": "here we are checking if the records which are in the left table i.e stgcust. doesn't exist in the second table i.e dimcust."
				},
				{
					"name": "exists2"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          City as string,",
				"          Salary as float,",
				"          Designation as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stagingcustomer",
				"source(output(",
				"          Customer_Key as integer,",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          City as string,",
				"          Salary as float,",
				"          Designation as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Dimensioncustomer",
				"stagingcustomer, Dimensioncustomer exists(stagingcustomer@CustomerID == Dimensioncustomer@CustomerID,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"stagingcustomer, Dimensioncustomer exists(stagingcustomer@CustomerID == Dimensioncustomer@CustomerID,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists2",
				"exists2 alterRow(updateIf(1==1)) ~> alterRow1",
				"exists1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Customer_Key as integer,",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          City as string,",
				"          Salary as float,",
				"          Designation as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerID,",
				"          CustomerName,",
				"          City,",
				"          Salary,",
				"          Designation",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Customer_Key as integer,",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          City as string,",
				"          Salary as float,",
				"          Designation as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['CustomerID'],",
				"     skipKeyWrites:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerID,",
				"          CustomerName,",
				"          City,",
				"          Salary,",
				"          Designation",
				"     )) ~> sink2"
			]
		}
	}
}